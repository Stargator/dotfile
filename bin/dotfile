#!/usr/bin/env ruby

# Set the library load path.
gem_root = "#{File.dirname(__FILE__)}/.."
$LOAD_PATH << gem_root + '/lib'
Dir.chdir(gem_root)

require 'optparse'
require 'ostruct'

require 'dotfile'
require 'dotfile/cli'

module Dotfile
  class Options

    def self.parse
      options = OpenStruct.new
      options.empty = ARGV.empty?
      options.update = false
      options.update_file = nil
      options.edit = false
      options.edit_file = nil
      options.set = nil
      options.edit_config = false
      options.edit_local = false
      options.edit_groups = false
      options.setup = false
      options.quiet = false

      @options = OptionParser.new do |opts|
        opts.banner = "Usage: dotfile [option] [file]\n\n"

        opts.on('-u', '--update [FILE]', "Update dotfile/s locally.") do |file|
          options.update = true
          options.update_file = file if file
        end

        opts.on('-e', '--edit FILE', "Edit a matching dotfile with $EDITOR.") do |file|
          options.edit = true
          options.edit_file = file
        end

        opts.on('-s', '--set OPTION:VALUE', "Temporarily set an option value.") do |o|
          arg = o.split(':')
          if arg.length == 2
            options.set = { option: arg[0], value: arg[1] }
          else
            abort "Usage: dotfile --set OPTION:VALUE"
          end
        end

        opts.on('-c', '--edit-config', "Edit dotfile.conf.") do
          options.edit_config = true
        end

        opts.on('-l', '--edit-local', "Edit ~/.dotfile.conf.local.") do
          options.edit_local = true
        end

        opts.on('-g', '--edit-groups', "Edit groups.conf.") do
          options.edit_groups = true
        end

        opts.on('-S', '--setup', "Prepare the local environment.") do
          options.setup = true
        end

        opts.on('-q', '--quiet', "Suppress all non-critical output.") do
          options.quiet = true
        end

        opts.on_tail('-v', '--version', "Show version number.") do
          puts "dotfile v#{Dotfile::VERSION}\n\n" +
               "    Copyright (C) 2012 Kelsey David Judson\n" +
               "    Web: http://github.com/kelseyjudson/dotfile"
          exit
        end

        opts.on_tail('-h', '--help', "Show help.") do
          puts opts.help
          exit
        end
      end

      handle_missing_arguments { @options.parse! }

      options.usage = @options.help
      options
    end

    def self.handle_missing_arguments
      yield
    rescue OptionParser::MissingArgument
      abort @options.help
    end

  end
end

dotfile = Dotfile::CLI.new(Dotfile::Options.parse)
dotfile.run
